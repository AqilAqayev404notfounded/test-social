<!DOCTYPE html>
<html>
<head>
    <title>Video Call</title>
</head>
<body>
    <h1>Video Call</h1>
    <video id="localVideo" autoplay muted></video>
    <video id="remoteVideo" autoplay></video>

    <script>
        const localVideo = document.getElementById('localVideo');
        const remoteVideo = document.getElementById('remoteVideo');

        const webSocket = new WebSocket("ws://localhost:5000"); 
        let localStream;
        let peerConnection;
        const config = {
            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] 
        };

        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
            .then(stream => {
                localStream = stream;
                localVideo.srcObject = stream;
            });

        webSocket.onmessage = async (message) => {
            const data = JSON.parse(message.data);

            if (data.offer) {
                peerConnection = createPeerConnection();
                await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                webSocket.send(JSON.stringify({ answer }));
            } else if (data.answer) {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
            } else if (data.candidate) {
                const candidate = new RTCIceCandidate(data.candidate);
                await peerConnection.addIceCandidate(candidate);
            }
        };

        function createPeerConnection() {
            const pc = new RTCPeerConnection(config);
            localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

            pc.onicecandidate = event => {
                if (event.candidate) {
                    webSocket.send(JSON.stringify({ candidate: event.candidate }));
                }
            };

            pc.ontrack = event => {
                remoteVideo.srcObject = event.streams[0];
            };

            return pc;
        }

        async function call() {
            peerConnection = createPeerConnection();
            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            webSocket.send(JSON.stringify({ offer }));
        }

        document.addEventListener('DOMContentLoaded', call);
    </script>
</body>
</html>
